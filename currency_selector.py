import logging
logger = logging.getLogger(__name__)
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CallbackContext, CallbackQueryHandler
from typing import List, Tuple

# Liste compl√®te des devises avec emoji drapeau
CURRENCIES: List[Tuple[str, str]] = [
    ("USD", "üá∫üá∏ Dollar US"), ("EUR", "üá™üá∫ Euro"), ("CDF", "üá®üá© Franc Congolais"),
    ("XOF", "üá∏üá≥ Franc CFA Ouest"), ("XAF", "üá®üá≤ Franc CFA Central"),
    ("GBP", "üá¨üáß Livre Sterling"), ("JPY", "üáØüáµ Yen Japonais"), ("CNY", "üá®üá≥ Yuan Chinois"),
    ("INR", "üáÆüá≥ Roupie Indienne"), ("BRL", "üáßüá∑ Real Br√©silien"), ("CAD", "üá®üá¶ Dollar Canadien"),
    ("AUD", "üá¶üá∫ Dollar Australien"), ("AED", "üá¶üá™ Dirham UAE"), ("ZAR", "üáøüá¶ Rand Sud-Africain"),
    ("CHF", "üá®üá≠ Franc Suisse"), ("RUB", "üá∑üá∫ Rouble Russe"), ("KRW", "üá∞üá∑ Won Sud-Cor√©en"),
    ("TRY", "üáπüá∑ Livre Turque"), ("MXN", "üá≤üáΩ Peso Mexicain"), ("SEK", "üá∏üá™ Couronne Su√©doise"),
    ("NOK", "üá≥üá¥ Couronne Norv√©gienne"), ("DKK", "üá©üá∞ Couronne Danoise"),
    ("PLN", "üáµüá± Zloty Polonais"), ("TND", "üáπüá≥ Dinar Tunisien"), ("EGP", "üá™üá¨ Livre √âgyptienne"),
    ("MAD", "üá≤üá¶ Dirham Marocain"), ("GHS", "üá¨üá≠ Cedi Ghan√©en"), ("NGN", "üá≥üá¨ Naira Nig√©rian"),
    ("KES", "üá∞üá™ Shilling K√©nyan"), ("TZS", "üáπüáø Shilling Tanzanien")
]

ITEMS_PER_PAGE = 6

class CurrencySelector:
    """Gestionnaire de s√©lection de devise avec pagination"""

    @staticmethod
    def get_currency_markup(page: int = 0) -> InlineKeyboardMarkup:
        """G√©n√®re le clavier des devises avec pagination"""
        start = page * ITEMS_PER_PAGE
        end = start + ITEMS_PER_PAGE
        current_currencies = CURRENCIES[start:end]

        buttons = []
        for code, label in current_currencies:
            buttons.append([InlineKeyboardButton(label, callback_data=f"currency_{code}")])

        # Boutons de navigation
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è Pr√©c√©dent", callback_data=f"currency_page_{page - 1}"))
        if end < len(CURRENCIES):
            nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è Suivant", callback_data=f"currency_page_{page + 1}"))

        if nav_buttons:
            buttons.append(nav_buttons)

        # Bouton de retour
        buttons.append([InlineKeyboardButton("üîô Retour", callback_data="back_price")])

        return InlineKeyboardMarkup(buttons)

    @staticmethod
    async def handle_currency_page(update: Update, context: CallbackContext) -> None:
        """G√®re le changement de page des devises"""
        query = update.callback_query
        await query.answer()

        page = int(query.data.split("_")[-1])
        
        try:
            await query.edit_message_reply_markup(
                reply_markup=CurrencySelector.get_currency_markup(page)
            )
        except Exception as e:
            logger.error(f"Error updating currency page: {e}")

def setup_currency_handlers(application):
    """Configure les handlers pour la s√©lection de devise"""
    application.add_handler(
        CallbackQueryHandler(
            CurrencySelector.handle_currency_page,
            pattern=r"^currency_page_\d+$"  # Regex pour mieux cibler le pattern
        )
    )